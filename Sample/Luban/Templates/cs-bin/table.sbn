using Luban;
using System.Linq;
using System.Collections.Generic;
{{ 
    key_type = __table.key_ttype
    value_type =  __table.value_ttype
    
    func index_type_name
        ret (declaring_type_name $0.type)
    end
    
    func table_union_map_type_name
        ret 'Dictionary<(' + (array.each __table.index_list @index_type_name | array.join ', ') + '), ' + (declaring_type_name value_type)  + '>'
    end
    
    func table_key_list
        varName = $0
        indexList = __table.index_list |array.each do; ret varName + '.' + (format_property_name __code_style $0.index_field.name); end;
        ret array.join indexList ', '
    end
    
    func table_param_def_list
        paramList = __table.index_list |array.each do; ret (declaring_type_name $0.type) + ' ' + $0.index_field.name; end
        ret array.join paramList ', '
    end
    
    func table_param_name_list
        paramList = __table.index_list |array.each do; ret $0.index_field.name; end
        ret array.join paramList ', '
    end
    
    func get_ref_name 
        ret (format_property_name __code_style $0.name) + 'Ref'
    end
}}
{{namespace_with_grace_begin __namespace_with_top_module}}
    {{~if __table.comment != '' ~}}
    /// <summary>
    /// {{escape_comment __table.comment}}
    /// </summary>
    {{~end~}}
    {{~for file in __table.input_files~}}
    [ConfigFilePath("{{file}}")]
    {{~end~}}
    public partial class {{__name}} : TableBase
    {
        {{~if __table.is_map_table ~}}
        private readonly Dictionary<{{declaring_type_name key_type}}, {{declaring_type_name value_type}}> _dataMap;
        private readonly List<{{declaring_type_name value_type}}> _dataList;
        
        public {{__name}}(ByteBuf buf)
        {
            _dataMap = new Dictionary<{{declaring_type_name key_type}}, {{declaring_type_name value_type}}>();
            _dataList = new List<{{declaring_type_name value_type}}>();
            
            for(int n = buf.ReadSize() ; n > 0 ; --n)
            {
                {{declaring_type_name value_type}} v;
                {{deserialize 'buf' 'v' value_type}}
                _dataList.Add(v);
                _dataMap.Add(v.{{format_property_name __code_style __table.index_field.name}}, v);
            }
        }
    
        public Dictionary<{{declaring_type_name key_type}}, {{declaring_type_name value_type}}> DataMap => _dataMap;
        public List<{{declaring_type_name value_type}}> DataList => _dataList;
    
    {{~if value_type.is_dynamic~}}
        public T GetOrDefaultAs<T>({{declaring_type_name key_type}} key) where T : {{declaring_type_name value_type}} => _dataMap.GetValueOrDefault(key);
        public T GetAs<T>({{declaring_type_name key_type}} key) where T : {{declaring_type_name value_type}} => (T)_dataMap[key];
    {{~end~}}
        public {{declaring_type_name value_type}} GetOrDefault({{declaring_type_name key_type}} key) => _dataMap.GetValueOrDefault(key);
        public {{declaring_type_name value_type}} Get({{declaring_type_name key_type}} key) => _dataMap[key];
        public {{declaring_type_name value_type}} this[{{declaring_type_name key_type}} key] => _dataMap[key];
    
        public void ResolveRef()
        {
            foreach(var v in _dataList)
            {
                v.ResolveRef();
            }
        }
        
        public override void PreExport()
        {
            DataList.Clear();
            DataList.AddRange(DataMap.Values);
            DataList.Sort((a,b)=>a.{{format_property_name __code_style __table.index_field.name}}.CompareTo(b.{{format_property_name __code_style __table.index_field.name}}));
        }
        
        public override List<object> GetConfigList()
        {
            List<object> configs = new();
            configs.AddRange(DataList.OfType<object>());
            return configs;
        }    
            {{~else if __table.is_list_table ~}}
        private readonly List<{{declaring_type_name value_type}}> _dataList;
        {{~ for field in __value_type.def_bean.hierarchy_export_fields ~}}
        {{~if field.tags['index'] == 'multiple'~}}     
        private readonly Dictionary<{{declaring_type_name field.ctype}}, List<{{declaring_type_name __value_type}}>> _dataMap{{format_property_name __code_style field.name}};
        {{~end~}}
        {{~end~}}
    
        {{~if __table.is_union_index~}}
        private {{table_union_map_type_name}} _dataMapUnion;
        {{~else if !__table.index_list.empty?~}}
        {{~for idx in __table.index_list~}}
        private Dictionary<{{declaring_type_name idx.type}}, {{declaring_type_name value_type}}> _dataMap_{{idx.index_field.name}};
        {{~end~}}
        {{~end~}}
    
        public {{__name}}(ByteBuf buf)
        {
            _dataList = new();       
            for(int n = buf.ReadSize() ; n > 0 ; --n)
            {
                {{declaring_type_name value_type}} v;
                {{deserialize 'buf' 'v' value_type}}
                _dataList.Add(v);
            }
        {{~if __table.is_union_index~}}
            _dataMapUnion = new {{table_union_map_type_name}}();
            foreach(var v in _dataList)
            {
                _dataMapUnion.Add(({{table_key_list "v"}}), v);
            }
        {{~else if !__table.index_list.empty?~}}
        {{~for idx in __table.index_list~}}
            _dataMap_{{idx.index_field.name}} = new();
        {{~end~}}
            foreach(var v in _dataList)
            {
            {{~for idx in __table.index_list~}}
                _dataMap_{{idx.index_field.name}}.Add(v.{{format_property_name __code_style idx.index_field.name}}, v);
            {{~end~}}
            }
        {{~end~}}
            {{~ for field in __value_type.def_bean.hierarchy_export_fields ~}}
            {{~if field.tags['index'] == 'multiple'~}}     
            _dataMap{{format_property_name __code_style field.name}} = new();
            foreach(var v in _dataList)
            {
                if(!_dataMap{{format_property_name __code_style field.name}}.TryGetValue(v.{{format_property_name __code_style field.name}},out var {{field.name}}List))
                {
                    {{field.name}}List = new();
                    _dataMap{{format_property_name __code_style field.name}}.Add(v.{{format_property_name __code_style field.name}},{{field.name}}List);
                }
                {{field.name}}List.Add(v);
            }          
            {{~end~}}
            {{~end~}}
        }
    
        public List<{{declaring_type_name value_type}}> DataList => _dataList;
        {{~ for field in __value_type.def_bean.hierarchy_export_fields ~}}
        {{~if field.tags['index'] == 'multiple'~}}     
        public List<{{declaring_type_name __value_type}}> GetListBy{{format_property_name __code_style field.name}}({{declaring_type_name field.ctype}} key) => _dataMap{{format_property_name __code_style field.name}}.GetValueOrDefault(key);
        {{~end~}}
        {{~end~}}   
        {{~if __table.is_union_index~}}
        public {{declaring_type_name value_type}} Get({{table_param_def_list}}) => _dataMapUnion.GetValueOrDefault(({{table_param_name_list}}));
        {{~else if !__table.index_list.empty? ~}}
            {{~for idx in __table.index_list~}}
        public {{declaring_type_name value_type}} GetBy{{format_property_name __code_style idx.index_field.name}}({{declaring_type_name idx.type}} key) => _dataMap_{{idx.index_field.name}}.GetValueOrDefault(key);
            {{~end~}}
        {{~end~}}
        
        public void ResolveRef()
        {
            foreach(var v in _dataList)
            {
                v.ResolveRef();
            }
        }
        {{~else~}}
    
        private readonly {{declaring_type_name value_type}} _data;
    
        public {{__name}}(ByteBuf buf)
        {
            int n = buf.ReadSize();
            if (n != 1) throw new SerializationException("table mode=one, but size != 1");
            {{deserialize 'buf' '_data' value_type}}
        }
   
        {{~ for field in value_type.def_bean.hierarchy_export_fields ~}}
    {{~if field.comment != '' ~}}
        /// <summary>
        /// {{escape_comment field.comment}}
        /// </summary>
    {{~end~}}
        public {{declaring_type_name field.ctype}} {{format_property_name __code_style field.name}} => _data.{{format_property_name __code_style field.name}};
        {{~if can_generate_ref field~}}
        public {{declaring_type_name (get_ref_type field)}} {{get_ref_name field}} => _data.{{get_ref_name field}};
        {{~end~}}
        {{~end~}}
        
        public void ResolveRef()
        {
            _data.ResolveRef();
        }
        {{~end~}}
    }
{{namespace_with_grace_end __namespace_with_top_module}}