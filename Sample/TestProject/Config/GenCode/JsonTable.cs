
//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using Luban;
using SimpleJSON;
using System.Collections.Generic;

namespace Langrisser
{
    [ConfigFilePath("Json/*@测试.json")]
    public partial class JsonTable : TableBase
    {
        private readonly Dictionary<int, ValueBean> _dataMap = new();
        private readonly List<ValueBean> _dataList = new();
        
        public void LoadData(JSONNode buf)
        {
            _dataList.Clear();
            
            foreach(JSONNode ele in buf.Children)
            {
                ValueBean v;
                
                int key;
                { if(!ele["id"].IsNumber) { throw new SerializationException(); }  key = ele["id"]; }
                if(_dataMap.TryGetValue(key,out v))
                {
                    v.LoadData(ele);
                }
                else
                {
                    { if(!ele.IsObject) { throw new SerializationException(); }  v = ValueBean.DeserializeValueBean(ele);  }
                    _dataMap.Add(v.Id, v);
                }
    
                _dataList.Add(v);
            }
        }
    
        public Dictionary<int, ValueBean> DataMap => _dataMap;
        public List<ValueBean> DataList => _dataList;
    
        public ValueBean GetOrDefault(int key) => _dataMap.GetValueOrDefault(key);
        public ValueBean Get(int key) => _dataMap[key];
        public ValueBean this[int key] => _dataMap[key];
    
        public void ResolveRef()
        {
            foreach(var v in _dataList)
            {
                v.ResolveRef();
            }
        }
        
        public override void PreExport()
        {
            DataList.Clear();
            DataList.AddRange(DataMap.Values);
            DataList.Sort((a,b)=>a.Id.CompareTo(b.Id));
        }
        
        public override List<object> GetConfigList()
        {
            List<object> configs = new();
            configs.AddRange(DataList.OfType<object>());
            return configs;
        }  
    }
}
