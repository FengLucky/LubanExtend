
//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using Luban;
using SimpleJSON;


namespace Langrisser
{
    /// <summary>
    /// class 类型
    /// </summary>
    [Config]
    public partial class ClassBean : BeanBase
    {
        public virtual void LoadData(JSONNode buf)
        {
            { if(!buf["intField"].IsNumber) { throw new SerializationException(); }  IntField = buf["intField"]; }
            { if(!buf["longField"].IsNumber) { throw new SerializationException(); }  LongField = buf["longField"]; }
            { if(!buf["floatField"].IsNumber) { throw new SerializationException(); }  FloatField = buf["floatField"]; }
            { if(!buf["doubleField"].IsNumber) { throw new SerializationException(); }  DoubleField = buf["doubleField"]; }
            { if(!buf["refField"].IsNumber) { throw new SerializationException(); }  RefField = buf["refField"]; }
            RefFieldRef = default;
            { if(!buf["stringField"].IsString) { throw new SerializationException(); }  StringField = buf["stringField"]; }
            { if(!buf["boolField"].IsBoolean) { throw new SerializationException(); }  BoolField = buf["boolField"]; }
            { var __json0 = buf["setField"]; if(!__json0.IsArray) { throw new SerializationException(); } SetField = new System.Collections.Generic.HashSet<int>(/*__json0.Count*/); foreach(JSONNode __e0 in __json0.Children) { int __v0;  { if(!__e0.IsNumber) { throw new SerializationException(); }  __v0 = __e0; }  SetField.Add(__v0); }   }
            { var __json0 = buf["mapField"]; if(!__json0.IsArray) { throw new SerializationException(); } MapField = new System.Collections.Generic.Dictionary<int, int>(__json0.Count); foreach(JSONNode __e0 in __json0.Children) { int _k0;  { if(!__e0[0].IsNumber) { throw new SerializationException(); }  _k0 = __e0[0]; } int _v0;  { if(!__e0[1].IsNumber) { throw new SerializationException(); }  _v0 = __e0[1]; }  MapField.Add(_k0, _v0); }   }
            { var __json0 = buf["list1"]; if(!__json0.IsArray) { throw new SerializationException(); } List1 = new System.Collections.Generic.List<int>(__json0.Count); foreach(JSONNode __e0 in __json0.Children) { int __v0;  { if(!__e0.IsNumber) { throw new SerializationException(); }  __v0 = __e0; }  List1.Add(__v0); }   }
            { var __json0 = buf["list2"]; if(!__json0.IsArray) { throw new SerializationException(); } List2 = new System.Collections.Generic.List<int>(__json0.Count); foreach(JSONNode __e0 in __json0.Children) { int __v0;  { if(!__e0.IsNumber) { throw new SerializationException(); }  __v0 = __e0; }  List2.Add(__v0); }   }
        }
    
        public static ClassBean DeserializeClassBean(JSONNode buf)
        {
            var obj = new ClassBean();
            obj.LoadData(buf);
            return obj;
        }
    
        /// <summary>
        /// int 字段
        /// </summary>
        [ConfigField]
        [OriginalFieldName("intField")]
        public int IntField;
    
        /// <summary>
        /// long 字段
        /// </summary>
        [ConfigField]
        [OriginalFieldName("longField")]
        public long LongField;
    
        /// <summary>
        /// float 字段
        /// </summary>
        [ConfigField]
        [OriginalFieldName("floatField")]
        public float FloatField;
    
        /// <summary>
        /// double 字段
        /// </summary>
        [ConfigField]
        [OriginalFieldName("doubleField")]
        public double DoubleField;
    
        /// <summary>
        /// 引用其他表id
        /// </summary>
        [ConfigField]
        [OriginalFieldName("refField")]
        public int RefField;
    
        public ValueBean RefFieldRef;
        /// <summary>
        /// string 字段
        /// </summary>
        [ConfigField]
        [OriginalFieldName("stringField")]
        public string StringField;
    
        /// <summary>
        /// bool 字段
        /// </summary>
        [ConfigField]
        [OriginalFieldName("boolField")]
        public bool BoolField;
    
        /// <summary>
        /// set 字段
        /// </summary>
        [ConfigField]
        [OriginalFieldName("setField")]
        public System.Collections.Generic.HashSet<int> SetField;
    
        /// <summary>
        /// map 字段
        /// </summary>
        [ConfigField]
        [OriginalFieldName("mapField")]
        public System.Collections.Generic.Dictionary<int, int> MapField;
    
        /// <summary>
        /// list 字段,单格配置
        /// </summary>
        [ConfigField]
        [OriginalFieldName("list1")]
        public System.Collections.Generic.List<int> List1;
    
        public System.Collections.Generic.List<ValueBean> List1Ref;
        /// <summary>
        /// list 字段,多格配置
        /// </summary>
        [ConfigField]
        [OriginalFieldName("list2")]
        public System.Collections.Generic.List<int> List2;
    
        public System.Collections.Generic.List<ValueBean> List2Ref;
        public const int TypeID = 1993725224;
        public override int GetTypeId() => TypeID;
    
        public  void ResolveRef()
        {
            RefFieldRef = Tables.ValueTable.GetOrDefault(RefField);
            List1Ref = new System.Collections.Generic.List<ValueBean>(List1.Count);
            foreach (var v in List1) { List1Ref.Add(Tables.ValueTable.GetOrDefault(v)); }

            List2Ref = new System.Collections.Generic.List<ValueBean>(List2.Count);
            foreach (var v in List2) { List2Ref.Add(Tables.ValueTable.GetOrDefault(v)); }

        }
    
        public override string ToString()
        {
            return "{ "
            + "intField:" + IntField + ","
            + "longField:" + LongField + ","
            + "floatField:" + FloatField + ","
            + "doubleField:" + DoubleField + ","
            + "refField:" + RefField + ","
            + "stringField:" + StringField + ","
            + "boolField:" + BoolField + ","
            + "setField:" + Luban.StringUtil.CollectionToString(SetField) + ","
            + "mapField:" + Luban.StringUtil.CollectionToString(MapField) + ","
            + "list1:" + Luban.StringUtil.CollectionToString(List1) + ","
            + "list2:" + Luban.StringUtil.CollectionToString(List2) + ","
            + "}";
        }
    }
}
