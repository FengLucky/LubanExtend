
//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System.Collections.Generic;
using SimpleJSON;

namespace Langrisser
{
    public partial class Tables
    {
        private static System.Func<string, JSONNode> _loader;
        private static readonly Dictionary<string,int> TableIndex = new();
    
        public static MapTable MapTable {get; } = new();
        public static OneTable OneTable {get; } = new();
        public static InstanceTable InstanceTable {get; } = new();
        public static ListTable ListTable {get; } = new();
        public static JsonTable JsonTable {get; } = new();
        public static ValueTable ValueTable {get; } = new();
        public static SingleIndexMapTable SingleIndexMapTable {get; } = new();
        public static MultiIndexMapTable MultiIndexMapTable {get; } = new();
        public static UnionIndexMapTable UnionIndexMapTable {get; } = new();
        public static SingleIndexListTable SingleIndexListTable {get; } = new();
        public static MultiIndexListTable MultiIndexListTable {get; } = new();
        public static UnionIndexListTable UnionIndexListTable {get; } = new();
    
        private static void LoadData(System.Func<string, JSONNode> loader)
        {
            _loader = loader;
            TableIndex.Clear();
            
            MapTable.LoadData(_loader("maptable"));
            OneTable.LoadData(_loader("onetable"));
            InstanceTable.LoadData(_loader("instancetable"));
            ListTable.LoadData(_loader("listtable"));
            JsonTable.LoadData(_loader("jsontable"));
            ValueTable.LoadData(_loader("valuetable"));
            SingleIndexMapTable.LoadData(_loader("singleindexmaptable"));
            MultiIndexMapTable.LoadData(_loader("multiindexmaptable"));
            UnionIndexMapTable.LoadData(_loader("unionindexmaptable"));
            SingleIndexListTable.LoadData(_loader("singleindexlisttable"));
            MultiIndexListTable.LoadData(_loader("multiindexlisttable"));
            UnionIndexListTable.LoadData(_loader("unionindexlisttable"));
            
            TableIndex.Add("maptable",1);
            TableIndex.Add("onetable",2);
            TableIndex.Add("instancetable",3);
            TableIndex.Add("listtable",4);
            TableIndex.Add("jsontable",5);
            TableIndex.Add("valuetable",6);
            TableIndex.Add("singleindexmaptable",7);
            TableIndex.Add("multiindexmaptable",8);
            TableIndex.Add("unionindexmaptable",9);
            TableIndex.Add("singleindexlisttable",10);
            TableIndex.Add("multiindexlisttable",11);
            TableIndex.Add("unionindexlisttable",12);
            ResolveRef();
        }
    
        ///<summary>
        /// 重新加载指定表格
        ///</summary>
        private static void IncrementalUpdate(List<string> tables)
        {
            foreach(var table in tables)
            {
                var index = TableIndex[table];
                switch(index)
                {
                    case 1:
                        MapTable.LoadData(_loader("maptable"));
                        break;
                    case 2:
                        OneTable.LoadData(_loader("onetable"));
                        break;
                    case 3:
                        InstanceTable.LoadData(_loader("instancetable"));
                        break;
                    case 4:
                        ListTable.LoadData(_loader("listtable"));
                        break;
                    case 5:
                        JsonTable.LoadData(_loader("jsontable"));
                        break;
                    case 6:
                        ValueTable.LoadData(_loader("valuetable"));
                        break;
                    case 7:
                        SingleIndexMapTable.LoadData(_loader("singleindexmaptable"));
                        break;
                    case 8:
                        MultiIndexMapTable.LoadData(_loader("multiindexmaptable"));
                        break;
                    case 9:
                        UnionIndexMapTable.LoadData(_loader("unionindexmaptable"));
                        break;
                    case 10:
                        SingleIndexListTable.LoadData(_loader("singleindexlisttable"));
                        break;
                    case 11:
                        MultiIndexListTable.LoadData(_loader("multiindexlisttable"));
                        break;
                    case 12:
                        UnionIndexListTable.LoadData(_loader("unionindexlisttable"));
                        break;
                }
            }
            
            IncrementalResolveRef(tables);
        }
        
        private static void ResolveRef()
        {
            MapTable.ResolveRef();
            OneTable.ResolveRef();
            InstanceTable.ResolveRef();
            ListTable.ResolveRef();
            JsonTable.ResolveRef();
            ValueTable.ResolveRef();
            SingleIndexMapTable.ResolveRef();
            MultiIndexMapTable.ResolveRef();
            UnionIndexMapTable.ResolveRef();
            SingleIndexListTable.ResolveRef();
            MultiIndexListTable.ResolveRef();
            UnionIndexListTable.ResolveRef();
        }
    
        private static void IncrementalResolveRef(List<string> tables)
        {
            foreach(var table in tables)
            {
                var index = TableIndex[table];
                switch(index)
                {
                    case 1:
                        MapTable.ResolveRef();
                        break;
                    case 2:
                        OneTable.ResolveRef();
                        break;
                    case 3:
                        InstanceTable.ResolveRef();
                        break;
                    case 4:
                        ListTable.ResolveRef();
                        break;
                    case 5:
                        JsonTable.ResolveRef();
                        break;
                    case 6:
                        ValueTable.ResolveRef();
                        break;
                    case 7:
                        SingleIndexMapTable.ResolveRef();
                        break;
                    case 8:
                        MultiIndexMapTable.ResolveRef();
                        break;
                    case 9:
                        UnionIndexMapTable.ResolveRef();
                        break;
                    case 10:
                        SingleIndexListTable.ResolveRef();
                        break;
                    case 11:
                        MultiIndexListTable.ResolveRef();
                        break;
                    case 12:
                        UnionIndexListTable.ResolveRef();
                        break;
                }
            }
        }
    }
}
