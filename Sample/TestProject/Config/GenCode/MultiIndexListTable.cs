
//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using Luban;
using SimpleJSON;
using System.Collections.Generic;

namespace Langrisser
{
    [ConfigFilePath("CSV/测试.csv")]
    public partial class MultiIndexListTable : TableBase
    {
        private readonly List<ClassBean> _dataList;
        private readonly Dictionary<long, List<ClassBean>> _dataMapLongField = new();
        private readonly Dictionary<int, ClassBean> _dataMap_intField = new();
        private readonly Dictionary<long, ClassBean> _dataMap_longField = new();
    
        public void LoadData(JSONNode buf)
        {
            _dataList.Clear();
            _dataMapLongField.Clear();
            _dataMap_longField.Clear();
            
            foreach(JSONNode ele in buf.Children)
            {
                ClassBean v;
                
                int key;
                { if(!ele["intField"].IsNumber) { throw new SerializationException(); }  key = ele["intField"]; }
                if(_dataMap_intField.TryGetValue(key,out v))
                {
                    v.LoadData(ele);
                }
                else
                {
                    { if(!ele.IsObject) { throw new SerializationException(); }  v = ClassBean.DeserializeClassBean(ele);  }
                    _dataMap_intField.Add(key, v);
                }
                _dataMap_longField.Add(v.LongField, v);
                if(!_dataMapLongField.TryGetValue(v.LongField,out var longFieldList))
                {
                    longFieldList = new();
                    _dataMapLongField.Add(v.LongField,longFieldList);
                }
                longFieldList.Add(v);
                _dataList.Add(v);
            }
        }
    
        public List<ClassBean> DataList => _dataList;
        public List<ClassBean> GetListByLongField(long key) => _dataMapLongField.GetValueOrDefault(key);
        public ClassBean GetByIntField(int key) => _dataMap_intField.GetValueOrDefault(key);
        public ClassBean GetByLongField(long key) => _dataMap_longField.GetValueOrDefault(key);
       
        public void ResolveRef()
        {
            foreach(var v in _dataList)
            {
                v.ResolveRef();
            }
        }
    }
}
